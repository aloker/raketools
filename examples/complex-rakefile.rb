require 'raketools/raketools'

# Select one of the following two:
DEFAULT_ENVIRONMENT = 'development' 
#DEFAULT_ENVIRONMENT = 'production' 

desc 'Compile, test and analyze'
task :default => [:build]
task :build => [:clobber, :compile, :test, :analyze]

########################################
### Switches                         ###
########################################
task :quick do
  Raketools.quick()
end

task :debug do
  Raketools.build_config('Debug')
end

task :release do
  Raketools.build_config('Release')
end

########################################
### GENERATE                         ###
########################################
desc 'Generates all autogenerated files. Shortcut for generate:all'
task :generate => ['generate:all']

namespace :generate do
  desc 'Generates VersionInfo files'
  task :versioninfo => [:init] do
    Raketools.versioninfo()
  end
  
  desc 'Generates all autogenerated files.'
  task :all => ['generate:versioninfo']
end

########################################
### COMPILE                          ###
########################################
desc 'Compiles all source code. Shortcut for compile:all'
task :compile => ['compile:all']

namespace :compile do    
  desc 'Compiles all solutions in the source folder using MSBUILD'
  task :solution => [:init, 'generate:versioninfo'] do
      Raketools.msbuild()
  end
  
  desc 'Compiles all source code'
  task :all => ['compile:solution']
end

########################################
### TEST                             ###
########################################
desc 'Run all tests. Shortcut for test:all'
task :test => ['test:all']

namespace :test do
  desc 'Execute unit tests'
  task :unittests => [:compile] do
    Raketools.nunit()
  end
  
  desc 'Run all tests'
  task :all => [ 'unittests']
end

########################################
### ANALYZE                          ###
########################################
desc 'Execute all analysis tasks. Shortcut for analyze:all'
task :analyze => ['analyze:all'] 

namespace :analyze do
  desc 'Execute FxCop for all .FxCop file in the source directory'
  task :fxcop => [:compile] do
    Raketools.fxcop()
  end

  desc 'Execute Gendarme'
  task :gendarme => [:compile] do
    Raketools.gendarme()
  end
  
  desc 'Execute StyleCop for all .csproj files in the source directory'
  task :stylecop => [:init] do
    Raketools.stylecop()
  end
  
  desc 'Execute Simian'
  task :simian => [:init] do
    Raketools.simian()
  end
  
  desc 'Execute all analysis tasks'
  task :all => ['analyze:fxcop', 'analyze:stylecop', 'analyze:gendarme', 'analyze:simian']
end

########################################
### ENVIRONMENT SELECTION            ###
########################################
namespace :env do
  desc 'Activates the settings for the development environment'
  task :development do
    Raketools.configure('development')
  end
  
  desc 'Activates the settings for the production environment'
  task :production do
    Raketools.configure('production')
  end  
   
    
  Rake::Task["env:#{DEFAULT_ENVIRONMENT}"].invoke \
    if not Rake.application.options.show_tasks and 
       not Rake.application.options.show_prereqs and        
       not Rake.application.top_level_tasks.any? do |t| 
        /^env:/.match(t)
      end
end

task :init do 
  Raketools.init()
end